const Order = require('../models/Order')
const Product = require('../models/Product')
const User = require('../models/User')

// –°–Ω–∞–ø—à–æ—Ç —Ç–æ–≤–∞—Ä—ñ–≤
async function snapshotProducts(items) {
  return Promise.all(
    items.map(async item => {
      const prod = await Product.findById(item.productId)
      if (!prod) {
        console.warn('‚ùó –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', item.productId)
        return {
          productId: item.productId,
          name: '[—Ç–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ]',
          price: 0,
          quantity: item.quantity
        }
      }
      return {
        productId: prod._id,
        name: prod.name,
        price: prod.price,
        quantity: item.quantity
      }
    })
  )
}

// –°–Ω–∞–ø—à–æ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function snapshotUser(userId) {
  const u = await User.findById(userId, 'surname phone street')
  if (!u) {
    console.warn('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', userId)
    return {
      userName: '[–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ]',
      userPhone: '',
      userStreet: ''
    }
  }
  return {
    userName: u.surname,
    userPhone: u.phone,
    userStreet: u.street
  }
}

// GET /orders ‚Äî –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
exports.getAll = async (_req, res) => {
  try {
    const raws = await Order.find().sort({ createdAt: -1 }).lean()
    const orders = await Promise.all(
      raws.map(async o => {
        if (o.status === 'new') {
          const prods = await snapshotProducts(o.products)
          return { ...o, products: prods }
        }
        return o
      })
    )
    res.json(orders)
  } catch (err) {
    console.error('orderController.getAll error:', err)
    res.status(500).json({ msg: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}

// GET /orders/my ‚Äî –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
exports.getMyOrder = async (req, res) => {
  try {
    const raws = await Order.find({ userId: req.user._id }).sort({ createdAt: -1 }).lean()
    const orders = await Promise.all(
      raws.map(async o => {
        if (o.status === 'new') {
          const prods = await snapshotProducts(o.products)
          return { ...o, products: prods }
        }
        return o
      })
    )
    res.json(orders)
  } catch (err) {
    console.error('orderController.getMyOrder error:', err)
    res.status(500).json({ msg: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å' })
  }
}

// POST /orders ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≥–æ—Å—Ç—å –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
exports.create = async (req, res) => {
  try {
    const { products, customer } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Å–∏–≤—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    if (req.body.products.some(p => !p.productId || p.quantity === undefined)) {
      return res.status(400).json({ msg: '–ü—Ä–æ–¥—É–∫—Ç–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ productId —ñ quantity' });
    }
    console.log('üì• Incoming body:', req.body);
    console.log('üë§ User:', req.user);


    // –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–Ω—ñ–º–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    let frozenProducts;
    try {
      frozenProducts = await snapshotProducts(products);
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤ snapshotProducts:', err);
      return res.status(400).json({ msg: '–ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏' });
    }

    // –ë–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    let orderData = {
      products: frozenProducts,
      status: 'new',
      createdAt: new Date()
    };

    if (req.user) {
      // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
      const user = await User.findById(req.user._id, 'surname phone street');
      if (!user) return res.status(404).json({ msg: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

      Object.assign(orderData, {
        userId: user._id,
        userName: user.surname,
        userPhone: user.phone,
        userStreet: user.street || '',
        contact: user.phone
      });
    } else {
      // –ì—ñ—Å—Ç—å
      if (!customer?.name || !customer?.phone) {
        return res.status(400).json({ msg: '–ì—ñ—Å—Ç—å: –≤–∫–∞–∂—ñ—Ç—å —ñ–º‚Äô—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω' });
      }

      Object.assign(orderData, {
        userId: null,
        userName: customer.name,
        userPhone: customer.phone,
        userStreet: '',
        contact: customer.phone
      });
    }

    const order = new Order(orderData);
    await order.save();
    res.status(201).json(order);
  } catch (err) {
    console.error('orderController.create error:', err);
    res.status(500).json({ msg: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


// PATCH /orders/:id ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
exports.updateStatus = async (req, res) => {
  try {
    const { id } = req.params
    const { status } = req.body

    const order = await Order.findById(id)
    if (!order) return res.status(404).json({ msg: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })

    // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (!order.userName || !order.userPhone) {
      const snap = await snapshotUser(order.userId)
      Object.assign(order, snap)
    }

    // –ó–∞–º–æ—Ä–æ–∑–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏
    if (status === 'processing') {
      order.products = await snapshotProducts(order.products)
    }

    order.status = status
    await order.save()
    res.json(order)
  } catch (err) {
    console.error('orderController.updateStatus error:', err)
    res.status(500).json({ msg: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É' })
  }
}

// DELETE /orders/:id
exports.remove = async (req, res) => {
  try {
    await Order.findByIdAndDelete(req.params.id)
    res.json({ msg: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ' })
  } catch (err) {
    console.error('orderController.remove error:', err)
    res.status(500).json({ msg: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' })
  }
}

// DELETE /orders/:orderId/products/:productId
exports.removeProduct = async (req, res) => {
  try {
    const { orderId, productId } = req.params
    const order = await Order.findById(orderId)
    if (!order) return res.status(404).json({ msg: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' })

    order.products = order.products.filter(p => !p.productId.equals(productId))
    await order.save()
    res.json(order)
  } catch (err) {
    console.error('orderController.removeProduct error:', err)
    res.status(500).json({ msg: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' })
  }
}
